package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _markdown_blog_page_md = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x0a\xc9\x2c\xc9\x49\xb5\x52\x70\xca\xc9\x4f\x57\x28\x48\x4c\x4f\xe5\x0a\x2e\xcd\xcd\x4d\x2c\xaa\xb4\x52\x08\xc9\xc8\x2c\x56\xc8\x2c\x56\x48\x54\x48\x82\x4b\xfa\x24\x56\xe6\x97\x96\x58\x29\x64\xe6\xa5\xa4\x56\x70\x05\xe7\x94\xa6\x5b\x29\xe8\x73\x79\x16\x3b\x16\x95\x64\x26\x83\xcc\x49\x4b\xcc\x29\x4e\xe5\xd2\xd5\xd5\x05\x04\x00\x00\xff\xff\x04\x66\x5b\xc1\x5c\x00\x00\x00")

func markdown_blog_page_md() ([]byte, error) {
	return bindata_read(
		_markdown_blog_page_md,
		"markdown/blog_page.md",
	)
}

var _markdown_error_md = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x0a\xc9\x2c\xc9\x49\xb5\x52\x70\x2d\x2a\xca\x2f\x52\x28\x48\x4c\x4f\xe5\x0a\x2e\xcd\xcd\x4d\x2c\xaa\xb4\x52\x08\xc9\xc8\x2c\x56\xc8\x2c\x56\x48\xcc\x53\x48\x45\x48\xfb\x24\x56\xe6\x97\x96\x58\x29\x64\xe6\xa5\xa4\x56\x70\x05\xe7\x94\xa6\x5b\x41\xa4\xb9\x3c\x8b\x1d\x8b\x4a\x32\x93\x41\xc6\xa5\x25\xe6\x14\xa7\x72\xe9\xea\xea\x02\x02\x00\x00\xff\xff\xf8\xda\x0d\x5d\x63\x00\x00\x00")

func markdown_error_md() ([]byte, error) {
	return bindata_read(
		_markdown_error_md,
		"markdown/error.md",
	)
}

var _markdown_first_article_md = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x95\x41\x6f\xe3\x46\x0f\x86\xef\xfa\x15\xc4\xfa\xf2\x7d\x80\x95\x04\x69\x81\x16\xbe\x2c\x8c\x8d\x81\x06\x4d\x36\x41\x92\xee\xb6\xa7\x98\xd6\x50\xd2\xc0\xa3\xa1\x96\xc3\xb1\xe2\x7f\x5f\x50\xb2\x9d\x6c\xd2\xdb\x58\x33\x43\xbe\x7c\xe6\x25\x5d\x96\x65\xf1\xe4\x35\xd0\x02\x1a\x0e\xae\x43\xd9\x96\x1d\x29\x16\x8f\xb9\xeb\x50\xf6\x0b\x58\x3a\x07\xff\x2c\x6f\x6f\xc0\x3e\x3b\x54\x04\x65\xd0\x96\xc0\x71\x95\x3b\x8a\x5a\x5c\x77\xd8\xd0\x02\x5a\xd5\x3e\x2d\xce\xcf\xf7\x9c\x65\x83\xc9\x57\x67\x2c\xcd\x79\xc3\x01\x63\x73\x9e\x7e\x64\x14\x2a\x1b\xee\x5b\x92\xb3\x3e\x36\xc5\x13\x36\x69\x51\x00\x00\x94\x60\x69\x1d\x0f\xf1\xf0\xf3\xa8\xa4\xb8\xc1\x3d\x67\x5d\x00\x8a\xfa\x2a\x50\xf1\x18\x72\xb3\x80\xda\x4b\xd2\xf2\xf8\xed\x3e\x6f\x82\x4f\x2d\xb9\x05\x7c\xba\xbc\xb8\xbc\x28\x2f\x7e\x2b\x2f\x7f\xff\x54\x58\x65\x33\xf8\xc2\x5d\x1f\xf6\xb0\x74\x3b\x8c\x8a\x0d\xc1\x40\x9b\x96\x79\x0b\xb7\x8f\x45\x31\x9b\xc1\xbd\xf0\x26\x50\x67\x35\x6d\x08\x12\x87\x1d\xb9\xa2\x28\xe1\x3b\xc1\x80\x51\x81\x7b\x12\x54\xcf\x11\x94\xb0\x83\x8e\xba\x0d\x49\xb2\xe3\x8e\x21\xf7\x0e\x95\x12\xf8\x38\x02\xf9\x90\xab\x0f\xa8\x35\x4b\x57\x94\xb0\xda\x91\xec\x0f\x17\x8e\xe7\xc7\x6d\xe1\x0e\x06\x1f\x02\xa8\xf8\xa6\x21\x01\x3c\x49\x3c\x68\xa2\xa8\xb6\xe4\x2c\xf0\xed\x12\x96\xf7\xd7\x73\xd8\x50\x85\x39\x11\x70\x6d\x81\xbc\x00\x66\xe5\x84\x3b\x82\x9a\x50\xb3\x58\x99\x20\x54\x91\xdf\x11\x28\x33\x74\x18\xf7\xd0\xe3\x3e\x30\x3a\xd3\x9b\x94\xd0\xd9\x75\x8e\x74\x06\xf4\xb2\x80\x5b\x94\xad\x8f\x0d\x20\x24\x42\xa9\x5a\x4b\x39\xb4\x5e\x29\xf8\xa4\xe4\x00\xa3\x83\x1a\x43\xa2\xe7\x9e\x93\x57\x0b\xfc\x93\xec\x5f\xca\x5f\x5f\x13\xbc\x2a\x3f\x2b\x4a\xb8\x9f\x3e\x1f\x05\x39\xa8\x38\x2a\xfa\x98\xe0\xfa\x2a\x99\x08\xa1\xc4\x59\x2a\x4a\xa0\x2d\x2a\x0c\x24\x04\x55\x8b\xb1\x21\x37\x87\x4d\x56\x88\xac\x23\xb1\x3a\x87\x00\x42\x3f\xb2\x17\x72\xa7\x6b\x73\x48\x0c\x35\x0b\xd0\x08\xf9\x88\xef\x15\xc1\xdc\xd6\x91\xc8\x8d\xd6\x3d\x71\x4e\x54\x71\x74\x63\x3c\x4a\x23\xe3\x0f\x2f\xa8\xfc\x8a\xb1\x25\x18\x5a\x0e\x04\x63\x13\x6c\xa8\x66\x21\x48\x68\xd0\xbc\xda\x9b\xda\x0b\xd9\xde\x06\x13\x9d\x4d\x1e\xb2\xa4\x06\x0f\x7e\x64\xca\x63\xb8\xa4\x76\x4d\x5b\x4a\x74\xe2\x35\x87\x01\xbd\xc2\x0b\x60\xc7\xd9\x4c\x57\x1f\xb4\x19\x10\x8a\x06\xd2\xd9\x4b\x41\xf2\xb1\x09\xd3\x3d\x64\xf7\xc6\x15\x1d\x47\x0e\x5e\xdb\xd1\xd3\x7f\xf0\x30\x0a\xcf\x11\x02\x57\x18\x3e\x9b\xa1\x1f\x72\x84\x75\x87\x5b\x5a\x03\xcb\xb4\x02\xa5\xa4\xa5\x60\x45\xeb\xa2\x84\x3b\x81\x4d\xf6\xc1\xc1\x68\x49\xab\xf6\x8a\xab\x2d\x49\xed\x03\x9d\xc2\x7a\x85\x81\x65\x9b\x3e\x1f\x7a\xa4\x35\xcf\x21\x74\xd8\x4f\x4f\x87\x95\x26\xc0\x74\x2c\xf8\x68\x7c\xf5\x1d\xbd\x31\xf6\xa1\x6e\xf0\xe9\xe4\x89\x39\x20\x44\x1a\x80\xa2\xca\xde\x36\xcc\xcd\xee\xd8\x29\x13\xbd\x6c\xe5\x8f\xbf\xd7\x93\x47\x9f\xbd\x5b\x4f\xd9\xb6\xb4\x1f\x1d\xba\x7e\x58\x3d\xae\xbe\x5e\x3d\x5f\x7f\x7d\x5a\x3d\x7c\x5b\xde\x3c\x3f\xae\xbe\xac\xff\x03\x2b\x26\x50\x0d\x45\x09\xd7\xf5\xdb\x56\x39\x99\x7f\xf0\xda\x8e\x99\x12\x76\x3f\xa7\x1b\x08\x78\x47\x22\xde\x4d\x96\xe0\xe0\x4e\xd9\xa7\x90\x4b\x48\xd4\xa3\x58\xa3\x37\x0c\xc2\x59\x7d\x34\x3f\x53\xb5\x4d\x6f\xaa\x99\xcc\xba\xfe\x7e\xf7\xf0\xe7\xea\xe1\xf9\xf1\x66\xb5\xba\x7f\x27\xfb\x24\x36\x3a\xf0\x35\x58\x0b\x5b\x26\x9f\x80\x5e\xfa\xb1\x03\x46\x77\xbc\x07\x62\xf0\x6c\x66\x60\x3a\x81\xfe\x68\x94\x43\x8b\xf6\xc2\x15\xa5\x44\x6e\x42\x61\xa1\x4e\x27\x84\x52\x3f\xe6\x1f\x61\x20\x38\x5f\xd7\x24\x16\x39\x29\x6a\x4e\x50\xf1\xc4\x20\xc2\xfa\xf2\xe2\x62\x3d\x9f\xd6\x08\x42\xf6\x86\x95\x31\x27\x31\x39\x3e\x56\x42\xf6\x57\x71\x98\x23\x96\x46\x35\xd8\x16\x86\xc4\x6f\xf7\x5f\x75\xc4\x6c\xa3\x76\x1a\x0f\x2a\x9e\xc6\xa9\x32\x76\xc2\xfb\x82\xe9\xa5\x22\x47\x13\xdb\xa3\x01\x6e\x97\x7f\x3f\x7f\xb9\xfb\xeb\xeb\xd3\x51\x96\x6d\x1e\xe8\x39\x0a\x64\x52\xfe\x37\xb0\x24\x85\x0a\x13\x41\xaa\x28\xa2\x78\xb6\x24\xb8\x63\x6f\x42\xc1\xc7\xda\x47\xaf\x04\x81\xb9\xff\xff\xab\xb4\xf7\xb4\x73\x65\x10\x6d\x38\xed\x4f\xe3\xfa\x0d\xeb\x8f\x0a\x84\x3a\x36\x7b\x9f\x5a\x6d\xea\x96\x62\x36\x9b\xcd\xe0\xe9\xee\xea\x6e\x61\x3e\x72\x36\x9b\x9c\x3f\x34\x54\x4f\x92\x6c\x14\xc7\x8a\x0e\x43\xa4\x28\xfe\x0d\x00\x00\xff\xff\xa9\xc9\xa5\xac\xbe\x07\x00\x00")

func markdown_first_article_md() ([]byte, error) {
	return bindata_read(
		_markdown_first_article_md,
		"markdown/first_article.md",
	)
}

var _markdown_second_article_md = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x94\xcf\x6e\xdc\x38\x0c\xc6\xef\x7e\x0a\xa2\x73\xd9\x05\xc6\x49\x90\x2d\xb0\xc0\x5c\x8a\xa0\x19\x60\x83\x6d\x9b\x20\xc9\xb6\x7b\xcb\x70\x2c\xda\x16\x46\x16\x5d\x8a\x1a\x67\xde\x7e\x41\x7b\xfe\x35\xd9\x9b\x6c\x49\xe4\xc7\x9f\x3e\xb2\x2c\xcb\xe2\xd9\x6b\xa0\x05\x3c\x51\xc5\xd1\x01\x8a\xfa\x2a\x50\xf1\x94\xbb\x0e\x65\xb7\x80\xe7\xd6\x27\xf0\x09\xb4\x25\x48\xbf\x9e\xb9\xeb\xb0\xa1\x05\xb4\xaa\x7d\x5a\x5c\x5e\xee\x38\xcb\x1a\x93\xaf\x2e\x58\x9a\xcb\x86\x03\xc6\xe6\x32\xfd\xcc\x28\x54\x36\xdc\xb7\x24\x17\x7d\x6c\x8a\x67\x6c\xd2\xa2\x00\x00\x28\xa1\x43\xd9\x38\x1e\xe2\xfe\xb3\xe1\xe0\xec\x57\xf1\x05\x77\x9c\x75\x71\x52\x13\x72\xb3\xd8\xa7\x2f\x0f\x3f\x1f\xf2\x3a\xf8\xd4\x92\x5b\xc0\x87\xeb\xab\xeb\xab\xf2\xea\xcf\xf2\xfa\xe3\x87\xc2\x8a\x9a\xc1\x67\xee\xfa\xb0\x83\x1b\xb7\xc5\xa8\xd8\x10\x0c\xb4\x6e\x99\x37\xf0\xf5\xa9\x28\x66\x33\x78\x10\x5e\x07\xea\x40\x19\xd6\x04\x89\xc3\x96\x5c\x51\x94\xf0\x83\x60\xc0\xa8\xc0\x3d\x09\xaa\xe7\x08\x4a\xd8\x41\x47\xdd\x9a\x24\xd9\x71\xc7\x90\x7b\x87\x4a\x09\x7c\x1c\xb9\xbc\xcb\xd5\x07\xd4\x9a\xa5\x2b\x4a\x58\x6e\x49\x76\xfb\x0b\x87\xf3\xe3\xb6\x70\x07\x83\x0f\x01\x54\x7c\xd3\x90\x00\x1e\x25\xee\x35\x51\x54\x5b\x72\x16\xf8\x7e\x0d\x37\x0f\x77\x73\x58\x53\x85\x39\x11\x70\x6d\x81\xbc\x00\x66\xe5\x84\x5b\x82\x9a\x50\xb3\x58\x99\x20\x54\x91\xdf\x12\x28\x33\x74\x18\x77\xd0\xe3\x2e\x30\x3a\xd3\x9b\x94\xd0\xd9\x75\x8e\x74\x01\xf4\xba\x80\xaf\x28\x1b\x1f\x1b\x40\x48\x84\x52\xb5\x96\x72\x68\xbd\x52\xf0\x49\xc9\x01\x46\x07\x35\x86\x44\x2f\x3d\x27\xaf\x16\xf8\x17\xd9\x7f\x94\x1f\x4f\x09\x4e\xca\x2f\x8a\x12\x1e\xa6\xdf\x07\x41\x0e\x2a\x8e\x8a\x3e\x26\xb8\xbb\x4d\x26\x42\x28\x71\x96\x8a\xcc\x5e\xa8\x30\x90\x10\x54\x2d\xc6\x86\xdc\x1c\xd6\x59\x21\xb2\x8e\xc4\xea\x1c\x02\x08\xfd\xcc\x5e\xc8\x1d\xaf\xcd\x21\x31\xd4\x2c\x40\x23\xe4\x03\xbe\x13\x82\xb9\xad\x23\x91\x33\x61\x27\xce\x7b\x1f\x5b\x3c\x4a\x23\xe3\x77\x2f\xa8\x7c\xc2\xd8\x12\x0c\x2d\x07\x02\x87\x8a\xb0\xa6\x9a\x85\x20\xa1\x41\xf3\x6a\x6f\x6a\x2f\x64\x7b\x6b\x4c\x74\x31\x79\xc8\x92\x1a\x3c\xf8\x99\x29\x8f\xe1\x92\xda\x35\x6d\x29\xd1\x91\xd7\x1c\x06\xf4\x0a\xaf\x80\x1d\x67\x33\x5d\xbd\xd7\x36\xf6\x5b\x34\x90\xce\x5e\x0a\x92\x8f\x4d\x98\xee\x21\xbb\x33\x57\x74\x1c\x39\x78\x6d\x47\x4f\xff\xc5\xc3\x28\x3c\x47\x08\x5c\x61\xf8\x64\x86\x7e\xcc\x11\x56\x1d\x6e\x68\x05\x2c\xd3\x0a\x94\x92\x96\x82\x15\xad\x8a\x12\xee\x05\xd6\xd9\x07\x07\xa3\x25\xad\xda\x5b\xae\x36\x24\xb5\x0f\x74\x0c\xeb\x15\x06\x96\x4d\xfa\xb4\xef\x91\xd6\x3c\x87\xd0\x61\x3f\x3d\x1d\x56\x9a\x00\xd3\xa1\xe0\x83\xf1\xd5\x77\x74\x66\xec\x7d\xdd\x36\x4f\x0e\x9e\x98\x03\x42\xa4\x01\x28\xaa\xec\x6c\xc3\xdc\xec\x0e\x9d\x32\xd1\xcb\x56\xfe\xf8\xbd\x9a\x3c\xfa\xe2\xdd\x6a\xca\xb6\xa1\xdd\xe8\xd0\xd5\xe3\xf2\x69\xf9\xed\xf6\xe5\xee\xdb\xf3\xf2\xf1\xfb\xcd\x97\x97\xa7\xe5\xe7\xd5\xff\x60\xc5\x04\xaa\xa1\x28\xe1\xae\x3e\x6f\x95\xa3\xf9\x07\xaf\xed\x34\xeb\xb0\xfb\x35\xdd\x40\xc0\x5b\x12\xf1\x6e\xb2\x04\x07\x77\xcc\x3e\x85\xbc\x81\x44\x3d\x8a\x35\x7a\xc3\x20\x9c\xd5\x47\xf3\x33\x55\x9b\x74\x56\xcd\x64\xd6\xd5\x8f\xfb\xc7\xbf\x97\x8f\x2f\x4f\x5f\x96\xcb\x87\x37\xb2\x8f\x62\xa3\x03\x5f\x83\xb5\xb0\x65\xf2\x09\xe8\xb5\x1f\x3b\x60\x74\xc7\x5b\x20\x06\xcf\x66\x06\xa6\x23\xe8\xf7\x46\xd9\xb7\x68\x2f\x5c\x51\x4a\xe4\x26\x14\x16\xea\x78\x42\x28\xf5\x63\xfe\x11\x06\x82\xf3\x75\x4d\x62\x91\x93\xa2\xe6\x04\x15\x4f\x0c\x22\xac\xae\xaf\xae\x56\xf3\x69\x8d\x20\x64\x6f\x58\x19\x73\x12\x93\xe3\x63\x25\xd4\x51\x3c\xcc\x11\x4b\xa3\x1a\x6c\x0b\x43\xe2\xf3\xfd\x93\x8e\x98\x6d\xd4\x4e\xe3\x41\xc5\xd3\x38\x55\xc6\x4e\x78\x5b\x30\xbd\x56\xe4\x68\x62\x7b\x30\xc0\xd7\x9b\x7f\x5f\x3e\xdf\xff\xf3\xed\xf9\x20\xcb\x36\xf7\xf4\x1c\x05\x32\x29\xbf\x0d\x2c\x49\xa1\xc2\x44\x90\x2a\x8a\x28\x9e\x2d\x09\x6e\xd9\x9b\x50\xf0\xb1\xf6\xd1\x2b\x41\x60\xee\x7f\x3f\x49\x7b\x4b\x3b\x57\x06\xd1\x86\xd3\xee\x38\xae\xcf\x58\xbf\x57\x20\xd4\xb1\xd9\xfb\xd8\x6a\x53\xb7\x14\xb3\xd9\x6c\x06\xcf\xf7\xb7\xf7\x0b\xf3\x91\xb3\xd9\xe4\xfc\xbe\xa1\x7a\x92\x64\xa3\x38\x56\xb4\x1f\x22\x45\xf1\x5f\x00\x00\x00\xff\xff\x9a\xa0\xec\x70\xb9\x07\x00\x00")

func markdown_second_article_md() ([]byte, error) {
	return bindata_read(
		_markdown_second_article_md,
		"markdown/second_article.md",
	)
}

var _templates_article_gohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\xbd\x6e\xc3\x30\x0c\x84\x77\x3f\x05\xa1\xdd\x52\x87\x06\x28\x0a\xc5\x73\x87\x66\xcb\x0b\x28\x32\x0d\xa9\xd1\x8f\x21\xb2\x29\x0c\xc3\xef\x5e\xd8\xea\x4f\x7e\x36\xf3\xf3\xf1\x70\x3c\x69\xc7\x31\x74\x8d\x76\x68\xfa\xae\x01\x00\xd0\xec\x39\x60\x37\xcf\x20\x0f\xc8\xe6\xb8\x4e\xb0\x2c\x5a\x55\xde\x54\x51\xf0\xe9\x0c\x05\xc3\x5e\x10\x4f\x01\xc9\x21\xb2\x00\x57\x70\xd8\x0b\xc7\x3c\xd2\xab\x52\xc4\xc6\x9e\x47\xc3\x4e\x9e\x72\x66\xe2\x62\x46\xdb\x27\x69\x73\x54\x7f\x40\x3d\xcb\x9d\x7c\x52\x96\xe8\x9f\xc9\xe8\x93\xb4\x44\xa2\x6b\xb4\xaa\xc1\xf4\x29\xf7\x53\xcd\x37\xcf\xc0\x18\xc7\x60\x18\x41\x24\x73\x39\x99\x22\x60\x59\xb6\x7f\x35\x5b\xef\x2f\x60\x83\x21\xda\x0b\x9b\x13\x1b\x9f\xb0\x40\x9c\xda\x9d\xa8\x0e\xf7\xa2\x92\xbf\xe0\xe3\x93\xd8\x0f\x53\xbb\x2e\x60\xe2\xd6\x62\x62\x2c\x57\x0b\x8f\xce\xa1\x8d\x7d\xfb\x72\x27\xf9\x95\x6d\xfd\xbd\x1d\x0f\xef\x5b\x75\x2b\xb8\x75\xba\x45\x57\xe3\xcf\xe7\xe3\xa9\x43\xce\x6b\xa2\xf5\x54\xad\x6a\x1d\x5a\x6d\xaf\xf7\x1d\x00\x00\xff\xff\x15\xa9\xa0\xa4\xc4\x01\x00\x00")

func templates_article_gohtml() ([]byte, error) {
	return bindata_read(
		_templates_article_gohtml,
		"templates/article.gohtml",
	)
}

var _templates_index_gohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\xcd\x8e\x9c\x30\x10\x84\xef\x3c\x45\xcb\xca\x15\x3b\xab\xec\x4a\xd1\xca\x20\xe5\x01\x72\xdb\x7b\x64\xec\x9e\xb1\x33\xfe\x41\x76\x67\x22\x84\x78\xf7\x88\x31\xc9\x10\x66\x38\xe1\xa6\xba\xea\xa3\x40\x5a\x0a\xbe\x6f\xa4\x45\x65\xfa\x06\x00\x40\x92\x23\x8f\xfd\x3c\x03\xff\x8e\xa4\x3e\xd6\x13\x2c\x8b\x14\x75\xde\x54\x91\x77\xf1\x02\x19\x7d\xc7\x0a\x4d\x1e\x8b\x45\x24\x06\x36\xe3\xa9\x63\x96\x68\x2c\xef\x42\x14\x52\xfa\x32\x2a\xb2\x7c\x48\x89\x0a\x65\x35\x6a\x13\xb9\x4e\x41\xfc\x1b\x88\x57\xfe\xc6\x3f\x0b\x5d\xca\x7d\xc6\x83\x8b\x5c\x97\xc2\xfa\x46\x8a\x0a\x26\x87\x64\xa6\xca\x37\xcf\x40\x18\x46\xaf\x08\x81\x45\x75\x1d\x54\x66\xb0\x2c\xb7\x67\x95\xcd\xb8\x2b\x68\xaf\x4a\xe9\x98\x4e\x91\x94\x8b\x98\x21\x4c\xed\x1b\xab\x0e\x47\x51\x4e\xbf\xe1\xe7\xaf\x42\xee\x34\xb5\xeb\x02\x46\x6a\x35\x46\xc2\xbc\x5b\x78\x74\xf6\x6d\x30\xed\xd7\x83\xe4\x26\xb3\x2f\xfd\x87\x75\x05\x5c\x01\xb2\xb8\x12\xf3\xbf\x35\xc2\xa8\xce\x28\x85\x7d\xd9\x8a\xdc\x5f\xf3\x0c\x59\xc5\x33\xc2\x27\x95\xc9\x69\x8f\xf0\xde\x01\xff\x56\xef\xcb\xfa\x8e\x0f\x2b\x47\xaa\x30\xb4\x5f\x20\x0c\x2b\xd9\xeb\x13\xb2\x5d\xd2\xbd\x43\xad\xb2\xf9\xb1\x25\xb2\x7b\xf6\x56\xe9\x43\x9a\x30\xee\xfa\x1c\x1e\xa3\x39\x6e\x6d\xea\x27\xc7\xbd\xcf\x7f\x38\xa7\x94\xd6\xe6\x57\x27\x29\xea\x67\x97\xe2\xf6\x97\xfe\x09\x00\x00\xff\xff\x27\x64\x28\xb3\xac\x02\x00\x00")

func templates_index_gohtml() ([]byte, error) {
	return bindata_read(
		_templates_index_gohtml,
		"templates/index.gohtml",
	)
}

var _templates_partials_card_article_gohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x31\x6f\x83\x30\x14\x84\x77\x7e\xc5\xe9\xed\xe0\x29\x1b\xb0\x77\x6d\xba\x57\x0f\xfc\x02\x96\x6c\x40\xc6\x89\x1a\x59\xfe\xef\x95\x29\x51\xa1\x43\x27\x3f\xe9\xbe\xbb\xf3\xc5\x08\x2d\x37\x33\x09\xa8\x67\xaf\x3f\xd9\x07\xd3\x5b\x21\xa4\x54\xd4\xda\x3c\xd0\x5b\x5e\xd7\x66\x13\xa9\x2d\x00\xa0\x66\x8c\x5e\x6e\x0d\xa9\x1d\x56\x31\xa2\xba\xda\xfb\x80\x94\x76\x66\xe3\x8c\x1b\xb0\xfa\xbe\xa1\xac\xbf\x39\x1e\x24\x03\xc7\xc4\xd2\xb8\xa1\x0c\xf3\x42\x60\x1b\x1a\xaa\xaa\xea\xd5\xa1\x78\x3f\xfe\xfc\xa1\xec\x66\xfd\x3c\x96\x8c\x97\x93\x1c\x4c\xb0\x42\x6d\x6e\xfc\xc8\x27\x52\xaa\xd5\x78\x39\x18\x96\x33\x2f\x5f\xe1\x07\xbf\xde\x9d\x63\xff\xdc\x0c\xcb\x81\xff\x77\xed\x2b\xab\x0b\x13\xba\x30\x95\x8b\x37\x39\x84\xda\x77\x61\x0d\x37\x7b\xf9\x5d\xa2\xb4\x79\xb4\xc5\xfe\xc4\x08\x99\x34\x52\xfa\x0e\x00\x00\xff\xff\x39\x2c\x34\xaa\x81\x01\x00\x00")

func templates_partials_card_article_gohtml() ([]byte, error) {
	return bindata_read(
		_templates_partials_card_article_gohtml,
		"templates/partials/card_article.gohtml",
	)
}

var _templates_partials_footer_gohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\x52\xa8\xad\xe5\xb2\x49\xc9\x2c\x53\x48\xce\x49\x2c\x2e\xb6\x55\x4a\xce\xcf\x2b\x49\xcc\xcc\x4b\x2d\x52\xb2\xe3\x52\x50\x50\x50\x40\x96\x2b\xca\x2f\x87\x8a\xa2\xcb\x24\xe7\xe7\x20\xc9\x80\x80\x1b\xd8\x78\x85\xdc\xd4\xbc\x52\x84\x0e\xfd\x94\xcc\x32\x62\x0c\x20\x47\x21\x94\x09\xa5\xaa\xab\x15\x52\xf3\x52\x14\x6a\x6b\x01\x01\x00\x00\xff\xff\x3c\xf2\xab\x9e\xf2\x00\x00\x00")

func templates_partials_footer_gohtml() ([]byte, error) {
	return bindata_read(
		_templates_partials_footer_gohtml,
		"templates/partials/footer.gohtml",
	)
}

var _templates_partials_navbar_gohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x53\x41\x8e\x9d\x30\x0c\xdd\xcf\x29\x2c\xcf\xa6\x5d\x20\x2e\x00\x48\x55\xbb\xe8\xa6\x5d\xf5\x02\x86\xf8\xf3\xad\x7a\x12\x14\x02\xed\x08\x71\xf7\x8a\x24\xf4\x33\xcc\x7c\xa9\xed\xa6\x2b\x07\xfb\xf9\xf1\x9e\x9d\x2c\x0b\x18\xbe\x88\x65\x40\x4b\x73\x4b\x1e\x61\x5d\x1f\x2a\x23\x33\x74\x4a\xe3\x58\x63\xe7\x6c\x20\xb1\xec\xb1\x79\x00\x00\x38\xd6\xbc\xfb\x91\xb3\xb1\x62\xe9\xd0\xa5\x90\x08\x73\x28\xf8\xe7\x40\xd6\x14\xda\xef\x09\x95\xfe\x1a\xa0\xed\xd3\xe1\xc0\x13\xb9\x68\x67\xca\xe8\xd6\x93\x35\x08\x57\xcf\x97\x1a\x1f\xb1\xf9\x22\x57\x92\x4f\x3c\x57\x25\x9d\x3a\xdb\x29\x04\x67\x4f\xed\xc1\xf5\xbd\xb2\x47\x08\xcf\x03\xd7\x98\x30\x08\x86\x02\xe5\x5a\xd4\xac\x34\x8c\xbc\xa7\xc9\xf7\x1c\x6a\x7c\x4c\x14\x5f\x69\x46\x20\x2f\x54\x6c\x13\xf1\x4e\x7f\x93\xdf\x2a\xc9\x23\x9b\x1a\x2f\xa4\x1b\x51\xcc\x2a\xb5\xac\x35\x7e\x8b\xbf\xd9\xdc\x4b\x4f\x41\x9c\x3d\x59\x8e\xe2\xc7\x81\xee\x48\x2f\xa4\xdb\x5a\xaa\x72\x83\x9c\x2c\x97\xc9\xcf\x29\xfb\x62\x89\xc9\xda\x3e\xfb\x9b\x55\x31\x47\x1b\x6f\x28\x9a\xf4\xa4\xc7\xbe\x89\x8b\x58\x95\x03\xb6\x90\xc0\x4f\x40\x5d\x90\x99\xef\x34\xbc\xda\x74\xa1\x62\xbf\xef\x5b\x2e\xb1\xf9\xec\x9e\xf8\xe5\x50\x46\x5f\x38\xab\xcf\xd8\xbc\xeb\x26\xef\xd9\x86\xf7\x79\x22\xaf\x2e\xc2\x6d\x3a\x2a\x7f\xac\xf7\xdf\x84\x52\xeb\xa6\x80\xcd\x87\x2d\xfc\x4f\x1d\xf1\xad\x76\x01\x9b\x8f\xe9\xf0\x97\x5a\xaa\x72\xd2\xf3\xcd\x32\x32\x1f\x5e\x78\x69\x29\x7f\xe6\x4a\x0e\xcb\x02\x6c\x0d\xac\xeb\xaf\x00\x00\x00\xff\xff\x49\x05\x89\x27\x50\x04\x00\x00")

func templates_partials_navbar_gohtml() ([]byte, error) {
	return bindata_read(
		_templates_partials_navbar_gohtml,
		"templates/partials/navbar.gohtml",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"markdown/blog_page.md": markdown_blog_page_md,
	"markdown/error.md": markdown_error_md,
	"markdown/first_article.md": markdown_first_article_md,
	"markdown/second_article.md": markdown_second_article_md,
	"templates/article.gohtml": templates_article_gohtml,
	"templates/index.gohtml": templates_index_gohtml,
	"templates/partials/card_article.gohtml": templates_partials_card_article_gohtml,
	"templates/partials/footer.gohtml": templates_partials_footer_gohtml,
	"templates/partials/navbar.gohtml": templates_partials_navbar_gohtml,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"markdown": &_bintree_t{nil, map[string]*_bintree_t{
		"blog_page.md": &_bintree_t{markdown_blog_page_md, map[string]*_bintree_t{
		}},
		"error.md": &_bintree_t{markdown_error_md, map[string]*_bintree_t{
		}},
		"first_article.md": &_bintree_t{markdown_first_article_md, map[string]*_bintree_t{
		}},
		"second_article.md": &_bintree_t{markdown_second_article_md, map[string]*_bintree_t{
		}},
	}},
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"article.gohtml": &_bintree_t{templates_article_gohtml, map[string]*_bintree_t{
		}},
		"index.gohtml": &_bintree_t{templates_index_gohtml, map[string]*_bintree_t{
		}},
		"partials": &_bintree_t{nil, map[string]*_bintree_t{
			"card_article.gohtml": &_bintree_t{templates_partials_card_article_gohtml, map[string]*_bintree_t{
			}},
			"footer.gohtml": &_bintree_t{templates_partials_footer_gohtml, map[string]*_bintree_t{
			}},
			"navbar.gohtml": &_bintree_t{templates_partials_navbar_gohtml, map[string]*_bintree_t{
			}},
		}},
	}},
}}
